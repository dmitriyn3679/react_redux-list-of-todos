{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filterParams.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","query","value","initialFilterParams","status","All","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filterParams","selectedTodo","filteredTodos","useMemo","filteredByQuery","title","toLowerCase","includes","Active","completed","Completed","length","className","map","id","onClick","currentTodoActions","selectTodo","todoId","TodoFilter","selectStatuses","onSubmit","event","preventDefault","onChange","filterActions","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","getUser","userId","Loader","TodoModal","useState","isLoading","setIsLoading","user","setUser","useEffect","a","loadedUser","Error","fetchUser","href","email","name","App","loadedTodos","todosActions","fetchTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32620987.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = { type: 'filter/SetQuery', payload: string };\ntype SetStatusAction = { type: 'filter/SetStatus', payload: Status };\n\nconst setQuery = (query: string): SetQueryAction => (\n  {\n    type: 'filter/SetQuery',\n    payload: query,\n  }\n);\n\nconst setStatus = (value: Status): SetStatusAction => (\n  { type: 'filter/SetStatus', payload: value }\n);\n\nexport const actions = { setQuery, setStatus };\n\ntype Action = SetQueryAction | SetStatusAction;\n\ntype FilterParams = {\n  query: string;\n  status: Status;\n};\n\nconst initialFilterParams: FilterParams = {\n  query: '',\n  status: Status.All,\n};\n\nconst filterReducer = (\n  state: FilterParams = initialFilterParams,\n  action: Action,\n): FilterParams => {\n  switch (action.type) {\n    case 'filter/SetQuery':\n      return {\n        ...state, query: action.payload,\n      };\n\n    case 'filter/SetStatus':\n      return {\n        ...state, status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype GetTodos = { type: 'todos/GetAll', payload: Todo[] };\n\nconst setTodos = (todos: Todo[]): GetTodos => (\n  { type: 'todos/GetAll', payload: todos }\n);\n\nexport const actions = { getTodos: setTodos };\n\ntype Action = GetTodos;\n\nconst todosReducer = (\n  todos: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/GetAll':\n      return [...todos, ...action.payload];\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filterParams';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const filterParams = useAppSelector(state => state.filter);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  const { query, status } = filterParams;\n\n  const filteredTodos = useMemo(() => {\n    const filteredByQuery = todos\n      .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n\n    switch (status) {\n      case Status.Active:\n        return filteredByQuery.filter(todo => !todo.completed);\n\n      case Status.Completed:\n        return filteredByQuery.filter(todo => todo.completed);\n\n      default:\n        return filteredByQuery;\n    }\n  }, [todos, query, status]);\n\n  const selectTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  const todoIsSelected = (todoId: number) => {\n    if (selectedTodo) {\n      return selectedTodo.id === todoId;\n    }\n\n    return false;\n  };\n\n  return (\n    <>\n      {!filteredTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map(todo => (\n              <tr\n                data-cy=\"todo\"\n                key={todo.id}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={\n                    todo.completed\n                      ? 'has-text-success'\n                      : 'has-text-danger'\n                  }\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => selectTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={\n                        `far\n                        ${todoIsSelected(todo.id) ? 'fa-eye-slash' : 'fa-eye'}`\n                      }\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filterParams';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const filterParams = useAppSelector(state => state.filter);\n\n  const selectStatuses = [\n    { title: 'All', value: Status.All },\n    { title: 'Active', value: Status.Active },\n    { title: 'Completed', value: Status.Completed },\n  ];\n\n  const changeQuery = (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => dispatch(filterActions.setQuery(event.target.value));\n\n  const clearQuery = () => {\n    dispatch(filterActions.setQuery(''));\n  };\n\n  const changeStatus = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => dispatch(filterActions.setStatus(event.target.value as Status));\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={changeStatus}\n            value={filterParams.status}\n          >\n            {selectStatuses.map(status => (\n              <option\n                key={status.value}\n                value={status.value}\n              >\n                {status.title}\n              </option>\n            ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filterParams.query}\n          onChange={changeQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {filterParams.query.length > 0 && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoModal: FC<Props> = ({ todo }) => {\n  const {\n    id, title, userId, completed,\n  } = todo;\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useDispatch();\n\n  const closeTodo = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  useEffect(() => {\n    async function fetchUser() {\n      try {\n        const loadedUser = await getUser(userId);\n\n        setUser(loadedUser);\n      } catch (e) {\n        throw new Error('something went wrong');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              {user && (\n                <a href={`mailto:${user.email}`}>{user.name}</a>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    async function fetchTodos() {\n      setIsLoading(true);\n      try {\n        const loadedTodos = await getTodos();\n\n        dispatch(todosActions.getTodos(loadedTodos));\n      } catch (e) {\n        throw new Error('server not found');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    fetchTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            {isLoading ? (\n              <Loader />\n            ) : (\n              <>\n                <h1 className=\"title\">Todos:</h1>\n\n                <div className=\"block\">\n                  <TodoFilter />\n                </div>\n\n                <div className=\"block\">\n                  <TodoList />\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal todo={selectedTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}